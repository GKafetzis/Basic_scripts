from MEA_analysis import stimulus_and_spikes as sas
from Basic_scripts import Basic
from math import radians, degrees
import numpy as np

#print ("You have imported 'Single_cell_MB' ")
#print("Please run the function 'check_order' with order of directions you played")



def check_order(dir_degrees):

    re_order = estimate_reorder_indices(dir_degrees)
    angles_ordered_a, angles_ordered_d= order_angles(dir_degrees, re_order)
    return re_order, angles_ordered_a, angles_ordered_d


def estimate_reorder_indices( inpresentation_order):
    re_order = []
    for i in inpresentation_order:
        re_order.append(np.where(np.sort(inpresentation_order) == i)[0][0])

    return re_order


def reorder(arr, index, n):
    temp = [0] * n;
    for i in range(0, n):
        temp[index[i]] = arr[i]
    return temp


def order_angles(dir_degrees, re_order):
    angles_ordered_d = reorder(dir_degrees, re_order, len(dir_degrees))
    angles_ordered_d = np.append(angles_ordered_d, angles_ordered_d[0])

    angles_ordered_a = np.zeros(len(angles_ordered_d))
    for i in range(len(angles_ordered_d)):
        angles_ordered_a[i] = radians(angles_ordered_d[i])

    return angles_ordered_a, angles_ordered_d




def spikes_per_seg(single_stimulus, cell_index, df_spikes, df_stimulus, toreorder=False, re_order=None):
    """
    cell_index: value of 'Cell index'
    re_order: sequence of re_ordering. To be generated by running the check_order function with dir_degrees
    as input.
    """
    if type(single_stimulus)==int:
        cell_spikes = df_spikes.query("`Stimulus ID`==@single_stimulus and `Cell index`==@cell_index")['Spikes'].values[0].compressed()
        stim_traits = Basic.get_stimulus_traits(df_stimulus, single_stimulus)

    elif type(single_stimulus)==str:
        stim_idx = df_stimulus[df_stimulus['Stimulus_name'] == single_stimulus].index.get_level_values(0)
        cell_spikes = df_spikes.query("`Stimulus ID`==@stim_idx and `Cell index`==@cell_index")['Spikes'].values[0].compressed()
        stim_traits = Basic.get_stimulus_traits(df_stimulus, stim_idx)

    spikes_per_direction= np.zeros(stim_traits['stim_trials'])
    spikes_per_segment= np.zeros([stim_traits['stim_repeats'], stim_traits['stim_trials']])


    for trial in range(stim_traits['stim_trials']):

        spikes_per_dir=(sas.get_spikes_per_trigger_type_new(
        cell_spikes, stim_traits['stim_rel_trig'],
        trial, stim_traits['stim_trials'])[0])

        spikes_per_direction[trial]=sum([len(listElem) for listElem in spikes_per_dir])/stim_traits['stim_repeats']

        for repeat in range(stim_traits['stim_repeats']):
                    spikes_per_segment[repeat, trial]= len(spikes_per_dir[repeat])

    if toreorder:
        spikes_per_direction= reorder_spikes_per_dir(spikes_per_direction, re_order)
        spikes_per_segment= reorder_spikes_per_seg(spikes_per_segment, re_order)

    return spikes_per_direction, spikes_per_segment

def reorder_spikes_per_dir(spikes_per_dir, re_order):
    spikes_per_dir=reorder(spikes_per_dir, re_order, len(spikes_per_dir))
    return spikes_per_dir
def reorder_spikes_per_seg(spikes_per_seg, re_order):
    for repeat in range(spikes_per_seg.shape[0]):
        spikes_per_seg[repeat, :]=  reorder(spikes_per_seg[repeat, :], re_order, len(spikes_per_seg[repeat]))
    return spikes_per_seg
